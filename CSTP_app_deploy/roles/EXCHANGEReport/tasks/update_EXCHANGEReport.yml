---
- name: create {{version}} backup directory
  file:
    path: "{{ansible_env.HOME}}/upgrade/backup/{{version}}"
    state: directory


- name: stop EXCHANGEReport services
  shell: |
    source ~/.bash_profile;
    set -m; ./app.sh stop
  args:
    chdir:
      "{{ansible_env.HOME}}/Report/EXCHANGEReport/"
  ignore_errors: true


- name: check  EXCHANGEReport app
  stat:
    path: "{{ansible_env.HOME}}/Report/EXCHANGEReport"
  register: exchangereport_status


- name: check EXCHANGEReport backup
  stat:
    path: "{{ansible_env.HOME}}/upgrade/backup/{{version}}/EXCHANGEReport_{{version}}"
  register: exchangereport_backup_status


- name: backup EXCHANGEReport
  shell: |

    tar -czf {{ansible_env.HOME}}/upgrade/backup/{{version}}/EXCHANGEReport.tgz  EXCHANGEReport --exclude=EXCHANGEReport/Log/*
    touch {{ansible_env.HOME}}/upgrade/backup/{{version}}/EXCHANGEReport_{{version}}
  args:
    chdir: "{{ansible_env.HOME}}/Report/"
  when: (exchangereport_status.stat.exists) and (exchangereport_backup_status.stat.exists == False)


- name: save new app name
  shell: |
    echo -e "EXCHANGEReport/ \n" >> "{{ansible_env.HOME}}/upgrade/backup/{{version}}/new_application"
  when: exchangereport_status.stat.exists == False

- name: create EXCHANGEReport directory
  file:
    path: "{{ansible_env.HOME}}/Report/EXCHANGEReport"
    state: directory


- name: rm EXCHANGEReport old file
  file:
    path: "{{ansible_env.HOME}}/Report/EXCHANGEReport/{{item}}"
    state: absent
  with_items:
      - cfg
      - lib



- name: update EXCHANGEReport app
  shell: |
    cp -r  {{version_dir}}/{{version}}/Report/EXCHANGEReport  {{ansible_env.HOME}}/Report/



- name: update EXCHANGEReport database_current config
  replace:
    path: "{{ansible_env.HOME}}/Report/ExchangeReport/cfg/database_current.properties"
    regexp: "^{{item.key}}.*"
    replace: "{item.key}}={{item.value}}"
  with_items:
      - "{{EXCHANGEReport_conf.database_current}}"



- name: update EXCHANGEReport database_current CSTPDBpassword config
  replace:
    path: "{{ansible_env.HOME}}/Report/ExchangeReport/cfg/database_current.properties"
    regexp: "^jdbc.password.*"
    replace: "jdbc.password={{CSTPDBpassword}}"


- name: update EXCHANGEReport rmi config
  replace:
    path: "{{ansible_env.HOME}}/Report/ExchangeReport/cfg/rmi.properties"
    regexp: "^{{item.key}}.*"
    replace: "{item.key}}={{item.value}}"
  with_items:
      - "{{EXCHANGEReport_conf.rmi}}"



- name: unix2dos config
  shell: |
     unix2dos ./*
  args:
    chdir: "{{ansible_env.HOME}}/Report/ExchangeReport/cfg/"




- name: start EXCHANGEReport services
  shell: |
    source ~/.bash_profile;
    set -m; ./app.sh start
  args:
    chdir:
      "{{ansible_env.HOME}}/Report/EXCHANGEReport/"
  when: slave == 'master'


- name: wait service start
  wait_for:
    timeout: 10
  when: slave == 'master'

- name: check EXCHANGEReport services
  shell: |
    ps -ef | grep CSTP_REPORT_PTRD |grep -iv grep 
  register: EXCHANGEReport_services
  when: slave == 'master'

- name: show EXCHANGEReport services status
  debug:
    msg: "{{EXCHANGEReport_services.stdout_lines}}"
  when: slave == 'master'


